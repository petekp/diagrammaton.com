import Head from "next/head";
import { useEffect } from "react";
import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
} from "next";
import { getProviders, signIn, signOut, useSession } from "next-auth/react";
import { type SubmitHandler, useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { api } from "~/utils/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "../../@/components/ui/card";

export default function Home({
  providers,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <SignIn providers={providers} />
      </main>
    </>
  );
}

function SignIn({
  providers,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { data: sessionData } = useSession();

  return (
    <div className="container relative mx-auto w-full flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-1 lg:px-0">
      <div className="lg:p-8">
        <div className="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
          <div className="flex flex-col space-y-2 text-center">
            <Card className="w-[450px] p-5">
              <CardHeader>
                <CardTitle>Diagrammaton</CardTitle>
                <CardDescription>
                  {sessionData ? (
                    <span>Logged in as {sessionData.user?.email}</span>
                  ) : (
                    "Sign in to get a license code"
                  )}
                </CardDescription>
              </CardHeader>

              {sessionData && <AccountForm />}

              <CardFooter>
                {Object.values(providers).map((provider) => (
                  <div key={provider.name}>
                    <Button
                      variant="outline"
                      onClick={
                        sessionData
                          ? () => void signOut()
                          : () => void signIn(provider.id)
                      }
                    >
                      {sessionData
                        ? "Sign out"
                        : `Sign in with ${provider.name}`}
                    </Button>
                  </div>
                ))}
              </CardFooter>
            </Card>
          </div>

          {/* <p className="px-8 text-center text-sm text-muted-foreground">
            By clicking continue, you agree to our{" "}
            <Link
              href="/terms"
              className="underline underline-offset-4 hover:text-primary"
            >
              Terms of Service
            </Link>{" "}
            and{" "}
            <Link
              href="/privacy"
              className="underline underline-offset-4 hover:text-primary"
            >
              Privacy Policy
            </Link>

          </p> */}
        </div>
      </div>
    </div>
  );
}

const formSchema = z.object({
  openaiApiKey: z
    .string()
    .min(50, {
      message: "Invalid key, please check it and try again.",
    })
    .startsWith("sk-", {
      message: "Invalid key, please check it and try again.",
    }),
});

function AccountForm() {
  const { data: sessionData } = useSession();
  const generateLicenseKey = api.license.generateLicenseKey.useMutation();
  const currentLicenseKey = api.license.getUserLicenseKey.useQuery();
  const saveApiKey = api.apiKey.setUserApiKey.useMutation();
  const lastfourdigitsquery = api.apiKey.getUserKeyLastFour.useQuery();

  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      openaiApiKey: "",
      licenseKey: "",
    },
  });

  const { setValue } = form;

  useEffect(() => {
    setValue(
      "openaiApiKey",
      lastfourdigitsquery.data
        ? `sk-••••••••••••••${lastfourdigitsquery.data.slice(-4)}`
        : ""
    );
  }, [sessionData, lastfourdigitsquery.data, setValue]);

  useEffect(() => {
    setValue("licenseKey", currentLicenseKey.data || "");
  }, [sessionData, currentLicenseKey.data, setValue]);

  const onSubmitApiKey: SubmitHandler<z.infer<typeof formSchema>> = async (
    data
  ) => {
    await saveApiKey.mutateAsync({
      userId: sessionData?.user?.id || "",
      apiKey: data.openaiApiKey,
    });
  };

  const onSubmitLicenseKey = async () => {
    console.log("generate");
    await generateLicenseKey.mutateAsync();
  };

  return (
    <Form {...form}>
      <form className="space-y-4">
        <Controller
          name="openaiApiKey"
          render={({ field, fieldState: { error } }) => (
            <FormItem className="flex flex-col items-start">
              <FormLabel>OpenAI API key</FormLabel>
              <FormControl>
                <Input placeholder={"Enter key"} {...field} />
              </FormControl>
              {error && <p className="error-message">{error.message}</p>}
              <FormMessage />
            </FormItem>
          )}
        />
        <Controller
          name="licenseKey"
          render={({ field, fieldState: { error } }) => (
            <FormItem className="flex flex-col items-start">
              <FormLabel>License key</FormLabel>
              <FormControl>
                <Input placeholder={"Generate a key"} {...field} />
              </FormControl>
              {error && <p className="error-message">{error.message}</p>}
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="button" onClick={void onSubmitApiKey}>
          Submit API Key
        </Button>
        <Button type="button" onClick={onSubmitLicenseKey}>
          Regenerate License Key
        </Button>
      </form>
    </Form>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  // const session = await getServerSession(context.req, context.res, authOptions);

  // If the user is already logged in, redirect.
  // Note: Make sure not to redirect to the same page
  // To avoid an infinite loop!
  // if (session) {
  //   return { redirect: { destination: "/" } };
  // }

  const providers = await getProviders();

  return {
    props: { providers: providers ?? [] },
  };
}
